<div class="page-wrapper">
    <br>
    <br>
    <br>
    <br>
    
    <!-- Custom CSS for badges -->
    <style>
        .badge {
            display: inline-block;
            padding: 0.35em 0.65em;
            font-size: 0.9em;
            font-weight: 600;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
            margin-right: 5px;
            margin-bottom: 5px;
        }
        .bg-success {
            background-color: #28a745 !important;
            color: white !important;
        }
        .bg-warning {
            background-color: #ffc107 !important;
            color: #212529 !important;
        }
        .bg-danger {
            background-color: #dc3545 !important;
            color: white !important;
        }
        .bg-secondary {
            background-color: #6c757d !important;
            color: white !important;
        }
        .notification-status {
            display: block;
            clear: both;
            margin: 15px 0;
            padding: 10px 0;
            border-top: 1px solid #eee;
            border-bottom: 1px solid #eee;
        }
    </style>
    
    <!--Appointment Page Start-->
    <section class="appoinment-page">
        <div class="container">
            <div class="row">
                <div class="col-xl-8 col-lg-7">
                    <div class="appoinment-page__left">
                        <h3 class="appoinment-page__title">Schedule Your Appointment</h3>
                        <p class="mb-4">Fill in the details below to schedule your doctor appointment. You'll receive reminders before your scheduled time.</p>
                        
                        <form class="contact-form-validated appoinment-page__form" id="appointmentForm">
                            <div class="row">
                                <div class="col-xl-6 col-lg-6 col-md-6">
                                    <div class="appoinment-page__input-box">
                                        <input type="text" name="doctorName" placeholder="Doctor's Name" required>
                                    </div>
                                </div>
                                <div class="col-xl-6 col-lg-6 col-md-6">
                                    <div class="appoinment-page__input-box">
                                        <select name="speciality" class="form-control" required>
                                            <option value="" disabled selected>Select Speciality</option>
                                            <option value="General Physician">General Physician</option>
                                            <option value="Cardiologist">Cardiologist</option>
                                            <option value="Dermatologist">Dermatologist</option>
                                            <option value="Orthopedic">Orthopedic</option>
                                            <option value="Neurologist">Neurologist</option>
                                            <option value="Pediatrician">Pediatrician</option>
                                            <option value="Gynecologist">Gynecologist</option>
                                            <option value="Ophthalmologist">Ophthalmologist</option>
                                            <option value="Dentist">Dentist</option>
                                            <option value="Other">Other</option>
                                        </select>
                                    </div>
                                </div>
                                
                                <div class="col-xl-6 col-lg-6 col-md-6">
                                    <div class="appoinment-page__input-box">
                                        <input type="text" placeholder="mm/dd/yyyy" name="appointmentDate" id="datepicker" required>
                                    </div>
                                </div>
                                <div class="col-xl-6 col-lg-6 col-md-6">
                                    <div class="appoinment-page__input-box">
                                        <input type="time" name="appointmentTime" placeholder="Appointment Time" required>
                                    </div>
                                </div>
                                
                                <div class="col-xl-12">
                                    <div class="appoinment-page__input-box">
                                        <input type="text" name="location" placeholder="Hospital/Clinic Location" required>
                                    </div>
                                </div>
                                
                                <div class="col-xl-12">
                                    <div class="appoinment-page__input-box text-message-box">
                                        <textarea name="notes" placeholder="Additional notes about your appointment (symptoms, reason for visit, etc.)"></textarea>
                                    </div>
                                </div>
                                
                                <div class="col-xl-12">
                                    <h4 class="mt-3 mb-3">Reminder Preferences</h4>
                                </div>
                                
                                <div class="col-xl-4 col-lg-4 col-md-4">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" value="1" id="reminderDay" name="reminderDay" checked>
                                        <label class="form-check-label" for="reminderDay">
                                            Remind me 1 day before
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-xl-4 col-lg-4 col-md-4">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" value="1" id="reminderHour" name="reminderHour" checked>
                                        <label class="form-check-label" for="reminderHour">
                                            Remind me 1 hour before
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-xl-4 col-lg-4 col-md-4">
                                    <div class="form-check mb-3">
                                        <input class="form-check-input" type="checkbox" value="1" id="reminderAtTime" name="reminderAtTime" checked>
                                        <label class="form-check-label" for="reminderAtTime">
                                            Remind me at appointment time
                                        </label>
                                    </div>
                                </div>
                                
                                <div class="col-xl-12">
                                    <div class="appoinment-page__btn-box">
                                        <button type="submit" class="thm-btn">Save Appointment <span class="icon-plus"></span></button>
                                    </div>
                                </div>
                            </div>
                        </form>
                        <div class="result mt-3"></div>
                    </div>
                </div>
                <div class="col-xl-4 col-lg-5">
                    <div class="appoinment-page__right">
                        <div class="appoinment-page__working-hour">
                            <h3 class="appoinment-page__working-hour-title">My Upcoming Appointments</h3>
                            <p class="appoinment-page__working-hour-text">Your upcoming medical appointments will appear here</p>
                            
                            <!-- This section will be populated with appointments from backend later -->
                            <div class="no-appointments-message text-center py-4">
                                <i class="fa fa-calendar-alt fa-3x mb-3" style="color: #006D77;"></i>
                                <p>No upcoming appointments</p>
                                <p class="small">Your scheduled appointments will appear here</p>
                            </div>
                            
                            <!-- Example of how appointments will look (to be replaced with dynamic data) -->
                            <div class="upcoming-appointment">
                                <!-- Appointment cards will be loaded here dynamically -->
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
    <!--Appointment Page End-->
</div>

<script>
    // Frontend validation and API interaction
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('appointmentForm');
        const appointmentsContainer = document.querySelector('.upcoming-appointment');
        const noAppointmentsMessage = document.querySelector('.no-appointments-message');
        
        // Load appointments when the page loads
        loadAppointments();
        
        // Function to format date for display
        function formatDate(dateString) {
            const options = { year: 'numeric', month: 'long', day: 'numeric' };
            return new Date(dateString).toLocaleDateString(undefined, options);
        }
        
        // Function to format time for display
        function formatTime(timeString) {
            return timeString;
        }
        
        // Function to create appointment card
        function createAppointmentCard(appointment) {
            // Debug the entire appointment object
            console.log('Processing appointment:', JSON.stringify(appointment, null, 2));
            
            // Check if email notifications were sent
            const dayBeforeSent = appointment.emailNotifications && appointment.emailNotifications.dayBefore && appointment.emailNotifications.dayBefore.sent;
            const hourBeforeSent = appointment.emailNotifications && appointment.emailNotifications.hourBefore && appointment.emailNotifications.hourBefore.sent;
            const atTimeSent = appointment.emailNotifications && appointment.emailNotifications.atTime && appointment.emailNotifications.atTime.sent;
            
            console.log('Appointment email notification status:', { 
                id: appointment._id,
                dayBeforeSent: dayBeforeSent, 
                hourBeforeSent: hourBeforeSent,
                atTimeSent: atTimeSent,
                reminderPrefs: appointment.reminderPreferences
            });
            
            // Create notification status HTML
            let notificationStatus = '';
            
            // Check if reminder preferences exist and are properly structured
            if (!appointment.reminderPreferences) {
                console.log('No reminder preferences found, creating default');
                appointment.reminderPreferences = {
                    reminderDay: true,
                    reminderHour: true,
                    reminderAtTime: true
                };
            }
            
            if (appointment.reminderPreferences && appointment.reminderPreferences.reminderDay) {
                let dayStatus;
                if (dayBeforeSent) {
                    dayStatus = '<span class="badge bg-success" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Day-before reminder sent</span>';
                } else if (appointment.emailNotifications && appointment.emailNotifications.dayBefore && appointment.emailNotifications.dayBefore.error) {
                    dayStatus = '<span class="badge bg-danger" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Day-before reminder failed</span>';
                } else {
                    dayStatus = '<span class="badge bg-warning" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Day-before reminder pending</span>';
                }
                notificationStatus += dayStatus;
                console.log('Added day badge:', dayStatus);
            }
            
            if (appointment.reminderPreferences && appointment.reminderPreferences.reminderHour) {
                let hourStatus;
                if (hourBeforeSent) {
                    hourStatus = '<span class="badge bg-success" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Hour-before reminder sent</span>';
                } else if (appointment.emailNotifications && appointment.emailNotifications.hourBefore && appointment.emailNotifications.hourBefore.error) {
                    hourStatus = '<span class="badge bg-danger" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Hour-before reminder failed</span>';
                } else {
                    hourStatus = '<span class="badge bg-warning" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">Hour-before reminder pending</span>';
                }
                notificationStatus += hourStatus;
                console.log('Added hour badge:', hourStatus);
            }
            
            if (appointment.reminderPreferences && appointment.reminderPreferences.reminderAtTime) {
                let atTimeStatus;
                if (atTimeSent) {
                    atTimeStatus = '<span class="badge bg-success" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">At-time reminder sent</span>';
                } else if (appointment.emailNotifications && appointment.emailNotifications.atTime && appointment.emailNotifications.atTime.error) {
                    atTimeStatus = '<span class="badge bg-danger" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">At-time reminder failed</span>';
                } else {
                    atTimeStatus = '<span class="badge bg-warning" style="font-size: 14px; padding: 5px 8px; margin-right: 5px; margin-bottom: 5px; display: inline-block;">At-time reminder pending</span>';
                }
                notificationStatus += atTimeStatus;
                console.log('Added at-time badge:', atTimeStatus);
            }
            
            console.log('Final notification status HTML:', notificationStatus);
            
            return `
                <div class="card mb-3" data-id="${appointment._id}">
                    <div class="card-body">
                        <h5 class="card-title">${appointment.doctorName}</h5>
                        <h6 class="card-subtitle mb-2 text-muted">${appointment.speciality}</h6>
                        <p class="card-text"><i class="far fa-calendar-alt"></i> ${formatDate(appointment.appointmentDate)}</p>
                        <p class="card-text"><i class="far fa-clock"></i> ${formatTime(appointment.appointmentTime)}</p>
                        <p class="card-text"><i class="fas fa-map-marker-alt"></i> ${appointment.location}</p>
                        ${appointment.notes ? `<p class="card-text text-muted small">${appointment.notes}</p>` : ''}
                        <div class="notification-status my-3 py-2" style="display: block; clear: both; border-top: 1px solid #eee; border-bottom: 1px solid #eee; padding-top: 10px !important; padding-bottom: 10px !important;">
                            <p class="small text-muted mb-2">Reminder Status:</p>
                            ${notificationStatus || '<span class="badge bg-secondary" style="font-size: 14px; padding: 5px 8px; display: inline-block;">No reminder settings</span>'}
                        </div>
                        <div class="d-flex justify-content-between mt-3">
                            <a href="#" class="card-link text-danger delete-appointment" data-id="${appointment._id}">Cancel</a>
                            <a href="#" class="card-link text-primary edit-appointment" data-id="${appointment._id}">Reschedule</a>
                        </div>
                    </div>
                </div>
            `;
        }
        
        // Function to load all appointments
        function loadAppointments() {
            fetch('/api/appointments', {
                credentials: 'include' // Important for sending cookies/session data
            })
            .then(response => {
                console.log('Load appointments response status:', response.status);
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.message || 'Failed to fetch appointments');
                    });
                }
                return response.json();
            })
            .then(data => {
                console.log('Appointments data received:', data);
                if (data.success && data.data.length > 0) {
                    // Clear existing content and hide no appointments message
                    appointmentsContainer.innerHTML = '';
                    noAppointmentsMessage.style.display = 'none';
                    appointmentsContainer.style.display = 'block';
                    
                    console.log('Displaying', data.data.length, 'appointments');
                    
                    // Add each appointment
                    data.data.forEach(appointment => {
                        appointmentsContainer.innerHTML += createAppointmentCard(appointment);
                    });
                    
                    // Add event listeners to delete buttons
                    document.querySelectorAll('.delete-appointment').forEach(button => {
                        button.addEventListener('click', handleDeleteAppointment);
                    });
                    
                    // Add event listeners to edit buttons
                    document.querySelectorAll('.edit-appointment').forEach(button => {
                        button.addEventListener('click', handleEditAppointment);
                    });
                } else {
                    // Show no appointments message
                    appointmentsContainer.style.display = 'none';
                    noAppointmentsMessage.style.display = 'block';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.querySelector('.result');
                resultDiv.innerHTML = `<div class="alert alert-danger">Error loading appointments: ${error.message}</div>`;
            });
        }
        
        // Handle delete appointment
        function handleDeleteAppointment(e) {
            e.preventDefault();
            const appointmentId = this.getAttribute('data-id');
            
            if (confirm('Are you sure you want to cancel this appointment?')) {
                fetch(`/api/appointments/${appointmentId}`, {
                    method: 'DELETE',
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Failed to delete appointment');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        // Remove the appointment card from UI
                        this.closest('.card').remove();
                        
                        // Check if there are any appointments left
                        if (appointmentsContainer.children.length === 0) {
                            appointmentsContainer.style.display = 'none';
                            noAppointmentsMessage.style.display = 'block';
                        }
                        
                        // Show success message
                        const resultDiv = document.querySelector('.result');
                        resultDiv.innerHTML = '<div class="alert alert-success">Appointment cancelled successfully!</div>';
                        resultDiv.scrollIntoView({ behavior: 'smooth' });
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    const resultDiv = document.querySelector('.result');
                    resultDiv.innerHTML = `<div class="alert alert-danger">Error cancelling appointment: ${error.message}</div>`;
                });
            }
        }
        
        // Handle edit appointment (we'll just redirect to edit page or populate form)
        function handleEditAppointment(e) {
            e.preventDefault();
            // For now just show message that feature is coming soon
            alert('Reschedule feature coming soon!');
        }
        
        // Form submission
        form.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Create FormData object
            const formData = new FormData(form);
            
            // Convert FormData to JSON with proper date formatting
            const appointmentData = {};
            formData.forEach((value, key) => {
                if (key === 'appointmentDate') {
                    // Ensure date is properly formatted (ISO string)
                    const dateParts = value.split('/');
                    if (dateParts.length === 3) {
                        const dateObj = new Date(dateParts[2], dateParts[0] - 1, dateParts[1]);
                        appointmentData[key] = dateObj.toISOString();
                    } else {
                        appointmentData[key] = value;
                    }
                } else if (key === 'reminderDay' || key === 'reminderHour' || key === 'reminderAtTime') {
                    // Ensure checkbox values are properly set as boolean true
                    appointmentData[key] = true;
                } else {
                    appointmentData[key] = value;
                }
            });
            
            // Explicitly check if checkboxes are unchecked (they won't appear in formData if unchecked)
            if (!formData.has('reminderDay')) {
                appointmentData.reminderDay = false;
            }
            if (!formData.has('reminderHour')) {
                appointmentData.reminderHour = false;
            }
            if (!formData.has('reminderAtTime')) {
                appointmentData.reminderAtTime = false;
            }
            
            console.log('Sending appointment data:', appointmentData);
            
            // Send appointment data to server
            fetch('/api/appointments', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(appointmentData),
                credentials: 'include' // Important for sending cookies/session data
            })
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    return response.json().then(err => {
                        throw new Error(err.message || 'Failed to save appointment');
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    // Show success message
                    const resultDiv = document.querySelector('.result');
                    resultDiv.innerHTML = '<div class="alert alert-success">Appointment scheduled successfully! Reminders will be sent according to your preferences.</div>';
                    
                    // Clear form
                    form.reset();
                    
                    // Reload appointments
                    loadAppointments();
                    
                    // Scroll to message
                    resultDiv.scrollIntoView({ behavior: 'smooth' });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                const resultDiv = document.querySelector('.result');
                resultDiv.innerHTML = `<div class="alert alert-danger">Error scheduling appointment: ${error.message}</div>`;
            });
        });
    });
</script>

<!-- Script to verify and fix badges after page load -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Wait for everything to load
        setTimeout(function() {
            console.log('Checking if notification badges are visible...');
            
            // Get all badge elements
            const badges = document.querySelectorAll('.badge');
            console.log('Found ' + badges.length + ' badge elements');
            
            // Force badges to be visible and styled
            badges.forEach(function(badge, index) {
                badge.style.display = 'inline-block';
                badge.style.padding = '5px 8px';
                badge.style.fontSize = '14px';
                badge.style.fontWeight = 'bold';
                badge.style.lineHeight = '1';
                badge.style.textAlign = 'center';
                badge.style.whiteSpace = 'nowrap';
                badge.style.verticalAlign = 'baseline';
                badge.style.borderRadius = '6px';
                badge.style.marginRight = '5px';
                badge.style.marginBottom = '5px';
                
                // Set colors based on class
                if (badge.classList.contains('bg-success')) {
                    badge.style.backgroundColor = '#28a745';
                    badge.style.color = 'white';
                } else if (badge.classList.contains('bg-warning')) {
                    badge.style.backgroundColor = '#ffc107';
                    badge.style.color = '#212529';
                } else if (badge.classList.contains('bg-danger')) {
                    badge.style.backgroundColor = '#dc3545';
                    badge.style.color = 'white';
                } else if (badge.classList.contains('bg-secondary')) {
                    badge.style.backgroundColor = '#6c757d';
                    badge.style.color = 'white';
                }
                
                console.log('Fixed badge ' + index + ':', badge.innerText);
            });
            
            // Check notification status containers
            const statusContainers = document.querySelectorAll('.notification-status');
            console.log('Found ' + statusContainers.length + ' notification status containers');
            
            statusContainers.forEach(function(container, index) {
                container.style.display = 'block';
                container.style.clear = 'both';
                container.style.margin = '15px 0';
                container.style.padding = '10px 0';
                container.style.borderTop = '1px solid #eee';
                container.style.borderBottom = '1px solid #eee';
                console.log('Fixed notification container ' + index);
            });
        }, 1000); // Check after 1 second
    });
</script>